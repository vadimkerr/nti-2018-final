pragma solidity ^0.4.19;

contract DealInterface {

    // Конструктор контракта
    // - идентификатор старой батареи
    // - идентификатор новой батареи
    // - адрес контракта расчетных токенов
    // - количество токенов, определяющих компенсацию амортизации батарей
    // - количество токенов, определяющих выполнение работ по замене
    // - временной промежуток, в ходе которого запрещено разблокирование
    //   расчетных токенов.
    function Deal(bytes20, bytes20, address, uint256, uint256, uint256) public {
    }

    // Возвращают идентификаторы батарей, вовлеченных в контракт.
    function oldBattery() view public returns(bytes20);
    function newBattery() view public returns(bytes20);

    // Возвращают информацию о батареях, вовлеченных в контракт.
    // Возвращаемые значения:
    // - количество зарядов
    // - идентификатор производителя
    // - наименование производителя
    function oldBatteryInfo() view public returns(uint256, bytes4, bytes);
    function newBatteryInfo() view public returns(uint256, bytes4, bytes);

    // Возвращает количество токенов, определяющих компенсацию амортизации
    // батарей
    function deprecationValue() view public returns(uint256);

    // Возвращает количество токенов, определяющих выполнение работ по
    // замене
    function serviceFee() view public returns(uint256);

    // Возвращает текущий статус контракта
    // 1 - Ожидание согласия со сделкой от автомобиля
    // 2 - Согласие со сделкой получено
    // 3 - Оплата работ выполнена
    function state() view public returns(uint256);

    // Проверяет, что переданный статус батареи получен от батареи, которая
    // зарегистрирована к замене (старая), что данный запрос идет от текущего
    // владельца батареи, который участвует в контракте в роли получателя новой
    // батареи. Если все условия выполняются, то токены идущие в оплату
    // контракта переводятся на счет контракта.
    // - запакованные данные, хранящие статус батареи. Упаковка
    //   данных используется для уменьшения используемого газа за данные,
    //   передаваемые в транзакции в метод контракта. Метод упаковки:
    //   p = n*(2**64) + t*(2**32) + v
    // - r компонента подписи для данных батареи
    // - s компонента подписи для данных батареи
    function agreeToDeal(uint256, bytes32, bytes32) public;

    // Проверяет, что переданный статус батареи получен от батареи, на которую
    // должна происходить замена. При этом:
    // 1) либо данный запрос идет от аккаунта, который участвует в контракте в роли
    //    получателя новой батареи
    // 2) либо запрос идет от аккаунта, который участвует в контракте в роли того,
    //    кто предоставляет сервис по замене и с момента запроса согласия с
    //    контрактом  прошло 24 часа
    // Если все условия выполняются, то токены идущие в оплату контракта
    // переводятся на счет сервисного центра, владельцы батарей изменяются.
    // - запакованные данные, хранящие статус батареи. Упаковка
    //   данных используется для уменьшения используемого газа за данные,
    //   передаваемые в транзакции в метод контракта. Метод упаковки:
    //   p = n*(2**64) + t*(2**32) + v
    // - r компонента подписи для данных батареи
    // - s компонента подписи для данных батареи
    function confirmDeal(uint256, bytes32, bytes32) public;

    // Перепосылает аргументы в контракт BatteryManagement для проверки цифровой
    // подписи. Возвращаемый результат проверки такой же, как и в оригинальной
    // функции: 0 - результат проверки цифровой подписи, показывает
    // что она сделана батареей, для которой существует токен; 1 - транзакция
    // с таким статусом уже отправлялась в блокчейн, что указывает на возможную
    // прослушку траффика; 2 - для  батареи нет соответствующего токена; 999 -
    // другая ошибка.
    // - число зарядов
    // - временная метка
    // - v, r, s компоненты цифровой подписи
    function verifyBattery(uint256 n, uint256 t, uint8 v, bytes32 r, bytes32 s) public view returns(uint256, address);

    // Обрабатывает запрос на разблокирование расчетных токенов и возвращает
    // токены на счет электромобиля, владельцы батарей, участвующих в сделке,
    // не изменяются.
    // Выполняется только если отправитель запроса, зарегистрирован в качестве
    // получателя новой батареи, если проверка подписи из статуса батареи указывает
    // на то, что батарея не была заменена, и если время из статуса больше,
    // чем разрешенное время разблокировки токенов.
    // - запакованные данные, хранящие статус батареи. Упаковка
    //   данных используется для уменьшения используемого газа за данные,
    //   передаваемые в транзакции в метод контракта. Метод упаковки:
    //   p = n*(2**64) + t*(2**32) + v
    // - r компонента подписи для данных батареи
    // - s компонента подписи для данных батареи
    function releaseTokensByCar(uint256, bytes32, bytes32) public;

    // Обрабатывает запрос на разблокирование расчетных токенов и перечисляет
    // токены на счет сервисного центра, происходит смена владельцев батарей,
    // участвующих в сделке.
    // Выполняется только если отправитель запроса, зарегистрирован в качестве
    // изначального владельца новой батареи, если проверка подписи из статуса
    // батареи указывает на то, что батарея действительно была заменена, и
    // если время из статуса больше, чем разрешенное время разблокировки токенов.
    // - запакованные данные, хранящие статус батареи. Упаковка
    //   данных используется для уменьшения используемого газа за данные,
    //   передаваемые в транзакции в метод контракта. Метод упаковки:
    //   p = n*(2**64) + t*(2**32) + v
    // - r компонента подписи для данных батареи
    // - s компонента подписи для данных батареи
    function releaseTokensByServiceCenter(uint256, bytes32, bytes32) public;

    // Отменяет сделку, если она получатель новой батареи, не согласился с
    // контрактом. Выполняется только если отправитель запроса - сервисный
    // центр.
    function cancelDeal() public;
}
